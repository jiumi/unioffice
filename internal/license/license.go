//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package license

import (
	_ce "crypto/rsa"
	"time"
)

func TrackUse(useKey string) {
}

func GetLicenseKey() *LicenseKey {
	return &LicenseKey{
		LicenseId:    "1",
		CustomerId:   "1",
		CustomerName: "1",
		Tier:         "1",
		CreatedAt:    time.Now(),
		CreatedAtInt: 0,
		ExpiresAt:    time.Now(),
		ExpiresAtInt: time.Now().AddDate(1000, 1, 1).UnixMilli(),
		CreatedBy:    "1",
		CreatorName:  "1",
		CreatorEmail: "1",
		UniPDF:       true,
		UniOffice:    true,
		UniHTML:      true,
		Trial:        false,
	}
}

const (
	LicenseTierUnlicensed = "\u0075\u006e\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0064"
	LicenseTierCommunity  = "\u0063o\u006d\u006d\u0075\u006e\u0069\u0074y"
	LicenseTierIndividual = "\u0069\u006e\u0064\u0069\u0076\u0069\u0064\u0075\u0061\u006c"
	LicenseTierBusiness   = "\u0062\u0075\u0073\u0069\u006e\u0065\u0073\u0073"
)

func (_fee *LicenseKey) Validate() error {
	return nil
}

type LegacyLicenseType byte

func GenRefId(prefix string) (string, error) {
	return "", nil
}

func (_bc *LicenseKey) ToString() string {
	return ""
}

func SetLegacyLicenseKey(s string) error {
	return nil
}

func SetLicenseKey(content string, customerName string) error {
	return nil
}

type LegacyLicense struct {
	Name        string
	Signature   string `json:",omitempty"`
	Expiration  time.Time
	LicenseType LegacyLicenseType
}

func (_cfg *LicenseKey) TypeToString() string {
	return ""
}

func (_ffd LegacyLicense) Verify(pubKey *_ce.PublicKey) error {
	return nil
}

func MakeUnlicensedKey() *LicenseKey {
	return GetLicenseKey()
}

func GetMeteredState() (MeteredStatus, error) {
	return MeteredStatus{
		OK:      true,
		Credits: 2000,
		Used:    0,
	}, nil
}

func SetMeteredKeyPersistentCache(val bool) {}

func (_ffe *LicenseKey) IsLicensed() bool {
	return true
}

func Track(docKey string, useKey string) error { return nil }

type MeteredStatus struct {
	OK      bool
	Credits int64
	Used    int64
}

func SetMeteredKey(apiKey string) error {
	return nil
}

type LicenseKey struct {
	LicenseId    string    `json:"license_id"`
	CustomerId   string    `json:"customer_id"`
	CustomerName string    `json:"customer_name"`
	Tier         string    `json:"tier"`
	CreatedAt    time.Time `json:"-"`
	CreatedAtInt int64     `json:"created_at"`
	ExpiresAt    time.Time `json:"-"`
	ExpiresAtInt int64     `json:"expires_at"`
	CreatedBy    string    `json:"created_by"`
	CreatorName  string    `json:"creator_name"`
	CreatorEmail string    `json:"creator_email"`
	UniPDF       bool      `json:"unipdf"`
	UniOffice    bool      `json:"unioffice"`
	UniHTML      bool      `json:"unihtml"`
	Trial        bool      `json:"trial"`
}
